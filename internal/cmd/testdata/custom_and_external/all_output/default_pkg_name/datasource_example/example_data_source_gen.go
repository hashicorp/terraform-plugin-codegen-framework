// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_example

import (
	"context"
	"example.com/apisdk"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

var exampleDataSourceSchema = schema.Schema{
	Attributes: map[string]schema.Attribute{
		"bool_attribute": schema.BoolAttribute{
			Computed: true,
		},
		"list_list_attribute": schema.ListAttribute{
			ElementType: types.ListType{
				ElemType: types.StringType,
			},
			Computed: true,
		},
		"list_map_attribute": schema.ListAttribute{
			ElementType: types.MapType{
				ElemType: types.StringType,
			},
			Computed: true,
		},
		"list_nested_attribute_assoc_ext_type": schema.ListNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: map[string]schema.Attribute{
					"bool_attribute": schema.BoolAttribute{
						Computed: true,
					},
					"float64_attribute": schema.Float64Attribute{
						Optional: true,
						Computed: true,
					},
					"int64_attribute": schema.Int64Attribute{
						Optional: true,
						Computed: true,
					},
					"number_attribute": schema.NumberAttribute{
						Optional: true,
						Computed: true,
					},
					"string_attribute": schema.StringAttribute{
						Optional: true,
						Computed: true,
					},
				},
			},
			Optional: true,
		},
		"list_nested_attribute_one": schema.ListNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: map[string]schema.Attribute{
					"bool_attribute": schema.BoolAttribute{
						Computed: true,
					},
				},
			},
			Computed: true,
		},
		"list_nested_attribute_three": schema.ListNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: map[string]schema.Attribute{
					"list_nested_attribute_three_list_nested_attribute_one": schema.ListNestedAttribute{
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"list_attribute": schema.ListAttribute{
									ElementType: types.StringType,
									Computed:    true,
								},
							},
						},
						Computed: true,
					},
				},
			},
			Computed: true,
		},
		"list_nested_attribute_two": schema.ListNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: map[string]schema.Attribute{
					"list_nested_attribute_two_list_nested_attribute_one": schema.ListNestedAttribute{
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"bool_attribute": schema.BoolAttribute{
									Computed: true,
								},
							},
						},
						Computed: true,
					},
				},
			},
			Computed: true,
		},
		"list_object_attribute": schema.ListAttribute{
			ElementType: types.ObjectType{
				AttrTypes: map[string]attr.Type{
					"obj_string_attr": types.StringType,
				},
			},
			Computed: true,
		},
		"list_object_object_attribute": schema.ListAttribute{
			ElementType: types.ObjectType{
				AttrTypes: map[string]attr.Type{
					"obj_obj_attr": types.ObjectType{
						AttrTypes: map[string]attr.Type{
							"obj_obj_string_attr": types.StringType,
						},
					},
				},
			},
			Computed: true,
		},
		"map_nested_attribute_assoc_ext_type": schema.MapNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: map[string]schema.Attribute{
					"bool_attribute": schema.BoolAttribute{
						Computed: true,
					},
					"float64_attribute": schema.Float64Attribute{
						Optional: true,
						Computed: true,
					},
					"int64_attribute": schema.Int64Attribute{
						Optional: true,
						Computed: true,
					},
					"number_attribute": schema.NumberAttribute{
						Optional: true,
						Computed: true,
					},
					"string_attribute": schema.StringAttribute{
						Optional: true,
						Computed: true,
					},
				},
			},
			Optional: true,
		},
		"object_attribute": schema.ObjectAttribute{
			AttributeTypes: map[string]attr.Type{
				"obj_string_attr": types.StringType,
			},
			Computed: true,
		},
		"object_list_attribute": schema.ObjectAttribute{
			AttributeTypes: map[string]attr.Type{
				"obj_list_attr": types.ListType{
					ElemType: types.StringType,
				},
			},
			Computed: true,
		},
		"object_list_object_attribute": schema.ObjectAttribute{
			AttributeTypes: map[string]attr.Type{
				"obj_list_attr": types.ListType{
					ElemType: types.ObjectType{
						AttrTypes: map[string]attr.Type{
							"obj_list_obj_attr": types.StringType,
						},
					},
				},
			},
			Computed: true,
		},
		"set_nested_attribute_assoc_ext_type": schema.SetNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: map[string]schema.Attribute{
					"bool_attribute": schema.BoolAttribute{
						Computed: true,
					},
					"float64_attribute": schema.Float64Attribute{
						Optional: true,
						Computed: true,
					},
					"int64_attribute": schema.Int64Attribute{
						Optional: true,
						Computed: true,
					},
					"number_attribute": schema.NumberAttribute{
						Optional: true,
						Computed: true,
					},
					"string_attribute": schema.StringAttribute{
						Optional: true,
						Computed: true,
					},
				},
			},
			Optional: true,
		},
		"single_nested_attribute_assoc_ext_type": schema.SingleNestedAttribute{
			Attributes: map[string]schema.Attribute{
				"bool_attribute": schema.BoolAttribute{
					Computed: true,
				},
				"float64_attribute": schema.Float64Attribute{
					Optional: true,
					Computed: true,
				},
				"int64_attribute": schema.Int64Attribute{
					Optional: true,
					Computed: true,
				},
				"number_attribute": schema.NumberAttribute{
					Optional: true,
					Computed: true,
				},
				"string_attribute": schema.StringAttribute{
					Optional: true,
					Computed: true,
				},
			},
			Optional: true,
		},
		"single_nested_attribute_one": schema.SingleNestedAttribute{
			Attributes: map[string]schema.Attribute{
				"bool_attribute": schema.BoolAttribute{
					Computed: true,
				},
			},
			Computed: true,
		},
		"single_nested_attribute_three": schema.SingleNestedAttribute{
			Attributes: map[string]schema.Attribute{
				"single_nested_attribute_three_single_nested_attribute_one": schema.SingleNestedAttribute{
					Attributes: map[string]schema.Attribute{
						"list_attribute": schema.ListAttribute{
							ElementType: types.StringType,
							Computed:    true,
						},
					},
					Computed: true,
				},
			},
			Computed: true,
		},
		"single_nested_attribute_two": schema.SingleNestedAttribute{
			Attributes: map[string]schema.Attribute{
				"single_nested_attribute_two_single_nested_attribute_one": schema.SingleNestedAttribute{
					Attributes: map[string]schema.Attribute{
						"bool_attribute": schema.BoolAttribute{
							Computed: true,
						},
					},
					Computed: true,
				},
			},
			Computed: true,
		},
	},
	Blocks: map[string]schema.Block{
		"list_nested_block_assoc_ext_type": schema.ListNestedBlock{
			NestedObject: schema.NestedBlockObject{
				Attributes: map[string]schema.Attribute{
					"bool_attribute": schema.BoolAttribute{
						Computed: true,
					},
					"float64_attribute": schema.Float64Attribute{
						Optional: true,
						Computed: true,
					},
					"int64_attribute": schema.Int64Attribute{
						Optional: true,
						Computed: true,
					},
					"number_attribute": schema.NumberAttribute{
						Optional: true,
						Computed: true,
					},
					"string_attribute": schema.StringAttribute{
						Optional: true,
						Computed: true,
					},
				},
			},
		},
		"list_nested_block_one": schema.ListNestedBlock{
			NestedObject: schema.NestedBlockObject{
				Attributes: map[string]schema.Attribute{
					"bool_attribute": schema.BoolAttribute{
						Computed: true,
					},
				},
			},
		},
		"list_nested_block_three": schema.ListNestedBlock{
			NestedObject: schema.NestedBlockObject{
				Attributes: map[string]schema.Attribute{
					"object_attribute": schema.ObjectAttribute{
						AttributeTypes: map[string]attr.Type{
							"string_attribute_type": types.StringType,
						},
						Computed: true,
					},
				},
				Blocks: map[string]schema.Block{
					"list_nested_block_three_list_nested_block_one": schema.ListNestedBlock{
						NestedObject: schema.NestedBlockObject{
							Attributes: map[string]schema.Attribute{
								"list_attribute": schema.ListAttribute{
									ElementType: types.StringType,
									Computed:    true,
								},
							},
						},
					},
				},
			},
		},
		"list_nested_block_two": schema.ListNestedBlock{
			NestedObject: schema.NestedBlockObject{
				Blocks: map[string]schema.Block{
					"list_nested_block_two_list_nested_block_one": schema.ListNestedBlock{
						NestedObject: schema.NestedBlockObject{
							Attributes: map[string]schema.Attribute{
								"bool_attribute": schema.BoolAttribute{
									Computed: true,
								},
							},
						},
					},
				},
			},
		},
		"set_nested_block_assoc_ext_type": schema.SetNestedBlock{
			NestedObject: schema.NestedBlockObject{
				Attributes: map[string]schema.Attribute{
					"bool_attribute": schema.BoolAttribute{
						Computed: true,
					},
					"float64_attribute": schema.Float64Attribute{
						Optional: true,
						Computed: true,
					},
					"int64_attribute": schema.Int64Attribute{
						Optional: true,
						Computed: true,
					},
					"number_attribute": schema.NumberAttribute{
						Optional: true,
						Computed: true,
					},
					"string_attribute": schema.StringAttribute{
						Optional: true,
						Computed: true,
					},
				},
			},
		},
		"single_nested_block_assoc_ext_type": schema.SingleNestedBlock{
			Attributes: map[string]schema.Attribute{
				"bool_attribute": schema.BoolAttribute{
					Computed: true,
				},
				"float64_attribute": schema.Float64Attribute{
					Optional: true,
					Computed: true,
				},
				"int64_attribute": schema.Int64Attribute{
					Optional: true,
					Computed: true,
				},
				"number_attribute": schema.NumberAttribute{
					Optional: true,
					Computed: true,
				},
				"string_attribute": schema.StringAttribute{
					Optional: true,
					Computed: true,
				},
			},
		},
		"single_nested_block_one": schema.SingleNestedBlock{
			Attributes: map[string]schema.Attribute{
				"bool_attribute": schema.BoolAttribute{
					Computed: true,
				},
			},
		},
		"single_nested_block_three": schema.SingleNestedBlock{
			Attributes: map[string]schema.Attribute{
				"object_attribute": schema.ObjectAttribute{
					AttributeTypes: map[string]attr.Type{
						"string_attribute_type": types.StringType,
					},
					Computed: true,
				},
			},
			Blocks: map[string]schema.Block{
				"single_nested_block_three_list_nested_block_one": schema.ListNestedBlock{
					NestedObject: schema.NestedBlockObject{
						Attributes: map[string]schema.Attribute{
							"list_attribute": schema.ListAttribute{
								ElementType: types.StringType,
								Computed:    true,
							},
						},
					},
				},
			},
		},
		"single_nested_block_two": schema.SingleNestedBlock{
			Blocks: map[string]schema.Block{
				"single_nested_block_two_single_nested_block_one": schema.SingleNestedBlock{
					Attributes: map[string]schema.Attribute{
						"bool_attribute": schema.BoolAttribute{
							Computed: true,
						},
					},
				},
			},
		},
	},
}

type ExampleModel struct {
	BoolAttribute                     types.Bool   `tfsdk:"bool_attribute"`
	ListListAttribute                 types.List   `tfsdk:"list_list_attribute"`
	ListMapAttribute                  types.List   `tfsdk:"list_map_attribute"`
	ListNestedAttributeAssocExtType   types.List   `tfsdk:"list_nested_attribute_assoc_ext_type"`
	ListNestedAttributeOne            types.List   `tfsdk:"list_nested_attribute_one"`
	ListNestedAttributeThree          types.List   `tfsdk:"list_nested_attribute_three"`
	ListNestedAttributeTwo            types.List   `tfsdk:"list_nested_attribute_two"`
	ListObjectAttribute               types.List   `tfsdk:"list_object_attribute"`
	ListObjectObjectAttribute         types.List   `tfsdk:"list_object_object_attribute"`
	MapNestedAttributeAssocExtType    types.Map    `tfsdk:"map_nested_attribute_assoc_ext_type"`
	ObjectAttribute                   types.Object `tfsdk:"object_attribute"`
	ObjectListAttribute               types.Object `tfsdk:"object_list_attribute"`
	ObjectListObjectAttribute         types.Object `tfsdk:"object_list_object_attribute"`
	SetNestedAttributeAssocExtType    types.Set    `tfsdk:"set_nested_attribute_assoc_ext_type"`
	SingleNestedAttributeAssocExtType types.Object `tfsdk:"single_nested_attribute_assoc_ext_type"`
	SingleNestedAttributeOne          types.Object `tfsdk:"single_nested_attribute_one"`
	SingleNestedAttributeThree        types.Object `tfsdk:"single_nested_attribute_three"`
	SingleNestedAttributeTwo          types.Object `tfsdk:"single_nested_attribute_two"`
	ListNestedBlockAssocExtType       types.List   `tfsdk:"list_nested_block_assoc_ext_type"`
	ListNestedBlockOne                types.List   `tfsdk:"list_nested_block_one"`
	ListNestedBlockThree              types.List   `tfsdk:"list_nested_block_three"`
	ListNestedBlockTwo                types.List   `tfsdk:"list_nested_block_two"`
	SetNestedBlockAssocExtType        types.Set    `tfsdk:"set_nested_block_assoc_ext_type"`
	SingleNestedBlockAssocExtType     types.Object `tfsdk:"single_nested_block_assoc_ext_type"`
	SingleNestedBlockOne              types.Object `tfsdk:"single_nested_block_one"`
	SingleNestedBlockThree            types.Object `tfsdk:"single_nested_block_three"`
	SingleNestedBlockTwo              types.Object `tfsdk:"single_nested_block_two"`
}

type ListNestedAttributeAssocExtTypeModel struct {
	BoolAttribute    types.Bool    `tfsdk:"bool_attribute"`
	Float64Attribute types.Float64 `tfsdk:"float64_attribute"`
	Int64Attribute   types.Int64   `tfsdk:"int64_attribute"`
	NumberAttribute  types.Number  `tfsdk:"number_attribute"`
	StringAttribute  types.String  `tfsdk:"string_attribute"`
}

type ListNestedAttributeOneModel struct {
	BoolAttribute types.Bool `tfsdk:"bool_attribute"`
}

type ListNestedAttributeThreeModel struct {
	ListNestedAttributeThreeListNestedAttributeOne types.List `tfsdk:"list_nested_attribute_three_list_nested_attribute_one"`
}

type ListNestedAttributeThreeListNestedAttributeOneModel struct {
	ListAttribute types.List `tfsdk:"list_attribute"`
}

type ListNestedAttributeTwoModel struct {
	ListNestedAttributeTwoListNestedAttributeOne types.List `tfsdk:"list_nested_attribute_two_list_nested_attribute_one"`
}

type ListNestedAttributeTwoListNestedAttributeOneModel struct {
	BoolAttribute types.Bool `tfsdk:"bool_attribute"`
}

type MapNestedAttributeAssocExtTypeModel struct {
	BoolAttribute    types.Bool    `tfsdk:"bool_attribute"`
	Float64Attribute types.Float64 `tfsdk:"float64_attribute"`
	Int64Attribute   types.Int64   `tfsdk:"int64_attribute"`
	NumberAttribute  types.Number  `tfsdk:"number_attribute"`
	StringAttribute  types.String  `tfsdk:"string_attribute"`
}

type SetNestedAttributeAssocExtTypeModel struct {
	BoolAttribute    types.Bool    `tfsdk:"bool_attribute"`
	Float64Attribute types.Float64 `tfsdk:"float64_attribute"`
	Int64Attribute   types.Int64   `tfsdk:"int64_attribute"`
	NumberAttribute  types.Number  `tfsdk:"number_attribute"`
	StringAttribute  types.String  `tfsdk:"string_attribute"`
}

type SingleNestedAttributeAssocExtTypeModel struct {
	BoolAttribute    types.Bool    `tfsdk:"bool_attribute"`
	Float64Attribute types.Float64 `tfsdk:"float64_attribute"`
	Int64Attribute   types.Int64   `tfsdk:"int64_attribute"`
	NumberAttribute  types.Number  `tfsdk:"number_attribute"`
	StringAttribute  types.String  `tfsdk:"string_attribute"`
}

type SingleNestedAttributeOneModel struct {
	BoolAttribute types.Bool `tfsdk:"bool_attribute"`
}

type SingleNestedAttributeThreeModel struct {
	SingleNestedAttributeThreeSingleNestedAttributeOne types.Object `tfsdk:"single_nested_attribute_three_single_nested_attribute_one"`
}

type SingleNestedAttributeThreeSingleNestedAttributeOneModel struct {
	ListAttribute types.List `tfsdk:"list_attribute"`
}

type SingleNestedAttributeTwoModel struct {
	SingleNestedAttributeTwoSingleNestedAttributeOne types.Object `tfsdk:"single_nested_attribute_two_single_nested_attribute_one"`
}

type SingleNestedAttributeTwoSingleNestedAttributeOneModel struct {
	BoolAttribute types.Bool `tfsdk:"bool_attribute"`
}

type ListNestedBlockAssocExtTypeModel struct {
	BoolAttribute    types.Bool    `tfsdk:"bool_attribute"`
	Float64Attribute types.Float64 `tfsdk:"float64_attribute"`
	Int64Attribute   types.Int64   `tfsdk:"int64_attribute"`
	NumberAttribute  types.Number  `tfsdk:"number_attribute"`
	StringAttribute  types.String  `tfsdk:"string_attribute"`
}

type ListNestedBlockOneModel struct {
	BoolAttribute types.Bool `tfsdk:"bool_attribute"`
}

type ListNestedBlockThreeModel struct {
	ObjectAttribute                        types.Object `tfsdk:"object_attribute"`
	ListNestedBlockThreeListNestedBlockOne types.List   `tfsdk:"list_nested_block_three_list_nested_block_one"`
}

type ListNestedBlockThreeListNestedBlockOneModel struct {
	ListAttribute types.List `tfsdk:"list_attribute"`
}

type ListNestedBlockTwoModel struct {
	ListNestedBlockTwoListNestedBlockOne types.List `tfsdk:"list_nested_block_two_list_nested_block_one"`
}

type ListNestedBlockTwoListNestedBlockOneModel struct {
	BoolAttribute types.Bool `tfsdk:"bool_attribute"`
}

type SetNestedBlockAssocExtTypeModel struct {
	BoolAttribute    types.Bool    `tfsdk:"bool_attribute"`
	Float64Attribute types.Float64 `tfsdk:"float64_attribute"`
	Int64Attribute   types.Int64   `tfsdk:"int64_attribute"`
	NumberAttribute  types.Number  `tfsdk:"number_attribute"`
	StringAttribute  types.String  `tfsdk:"string_attribute"`
}

type SingleNestedBlockAssocExtTypeModel struct {
	BoolAttribute    types.Bool    `tfsdk:"bool_attribute"`
	Float64Attribute types.Float64 `tfsdk:"float64_attribute"`
	Int64Attribute   types.Int64   `tfsdk:"int64_attribute"`
	NumberAttribute  types.Number  `tfsdk:"number_attribute"`
	StringAttribute  types.String  `tfsdk:"string_attribute"`
}

type SingleNestedBlockOneModel struct {
	BoolAttribute types.Bool `tfsdk:"bool_attribute"`
}

type SingleNestedBlockThreeModel struct {
	ObjectAttribute                          types.Object `tfsdk:"object_attribute"`
	SingleNestedBlockThreeListNestedBlockOne types.List   `tfsdk:"single_nested_block_three_list_nested_block_one"`
}

type SingleNestedBlockThreeListNestedBlockOneModel struct {
	ListAttribute types.List `tfsdk:"list_attribute"`
}

type SingleNestedBlockTwoModel struct {
	SingleNestedBlockTwoSingleNestedBlockOne types.Object `tfsdk:"single_nested_block_two_single_nested_block_one"`
}

type SingleNestedBlockTwoSingleNestedBlockOneModel struct {
	BoolAttribute types.Bool `tfsdk:"bool_attribute"`
}

func (m ListNestedAttributeAssocExtTypeModel) ObjectType(ctx context.Context) types.ObjectType {
	return types.ObjectType{AttrTypes: m.ObjectAttributeTypes(ctx)}
}

func (m ListNestedAttributeAssocExtTypeModel) ObjectAttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"bool_attribute":    types.BoolType,
		"float64_attribute": types.Float64Type,
		"int64_attribute":   types.Int64Type,
		"number_attribute":  types.NumberType,
		"string_attribute":  types.StringType,
	}
}

func (m ListNestedAttributeAssocExtTypeModel) ObjectNull(ctx context.Context) types.Object {
	return types.ObjectNull(
		m.ObjectAttributeTypes(ctx),
	)
}

func (m ListNestedAttributeAssocExtTypeModel) ObjectValueFrom(ctx context.Context, data any) (types.Object, diag.Diagnostics) {
	return types.ObjectValueFrom(
		ctx,
		m.ObjectAttributeTypes(ctx),
		data,
	)
}
func (m ListNestedAttributeOneModel) ObjectType(ctx context.Context) types.ObjectType {
	return types.ObjectType{AttrTypes: m.ObjectAttributeTypes(ctx)}
}

func (m ListNestedAttributeOneModel) ObjectAttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"bool_attribute": types.BoolType,
	}
}

func (m ListNestedAttributeOneModel) ObjectNull(ctx context.Context) types.Object {
	return types.ObjectNull(
		m.ObjectAttributeTypes(ctx),
	)
}

func (m ListNestedAttributeOneModel) ObjectValueFrom(ctx context.Context, data any) (types.Object, diag.Diagnostics) {
	return types.ObjectValueFrom(
		ctx,
		m.ObjectAttributeTypes(ctx),
		data,
	)
}
func (m ListNestedAttributeThreeModel) ObjectType(ctx context.Context) types.ObjectType {
	return types.ObjectType{AttrTypes: m.ObjectAttributeTypes(ctx)}
}

func (m ListNestedAttributeThreeModel) ObjectAttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"list_nested_attribute_three_list_nested_attribute_one": types.ListType{
			ElemType: ListNestedAttributeThreeListNestedAttributeOneModel{}.ObjectType(ctx),
		},
	}
}

func (m ListNestedAttributeThreeModel) ObjectNull(ctx context.Context) types.Object {
	return types.ObjectNull(
		m.ObjectAttributeTypes(ctx),
	)
}

func (m ListNestedAttributeThreeModel) ObjectValueFrom(ctx context.Context, data any) (types.Object, diag.Diagnostics) {
	return types.ObjectValueFrom(
		ctx,
		m.ObjectAttributeTypes(ctx),
		data,
	)
}

func (m ListNestedAttributeThreeListNestedAttributeOneModel) ObjectType(ctx context.Context) types.ObjectType {
	return types.ObjectType{AttrTypes: m.ObjectAttributeTypes(ctx)}
}

func (m ListNestedAttributeThreeListNestedAttributeOneModel) ObjectAttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"list_attribute": types.ListType{
			ElemType: types.StringType,
		},
	}
}

func (m ListNestedAttributeThreeListNestedAttributeOneModel) ObjectNull(ctx context.Context) types.Object {
	return types.ObjectNull(
		m.ObjectAttributeTypes(ctx),
	)
}

func (m ListNestedAttributeThreeListNestedAttributeOneModel) ObjectValueFrom(ctx context.Context, data any) (types.Object, diag.Diagnostics) {
	return types.ObjectValueFrom(
		ctx,
		m.ObjectAttributeTypes(ctx),
		data,
	)
}
func (m ListNestedAttributeTwoModel) ObjectType(ctx context.Context) types.ObjectType {
	return types.ObjectType{AttrTypes: m.ObjectAttributeTypes(ctx)}
}

func (m ListNestedAttributeTwoModel) ObjectAttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"list_nested_attribute_two_list_nested_attribute_one": types.ListType{
			ElemType: ListNestedAttributeTwoListNestedAttributeOneModel{}.ObjectType(ctx),
		},
	}
}

func (m ListNestedAttributeTwoModel) ObjectNull(ctx context.Context) types.Object {
	return types.ObjectNull(
		m.ObjectAttributeTypes(ctx),
	)
}

func (m ListNestedAttributeTwoModel) ObjectValueFrom(ctx context.Context, data any) (types.Object, diag.Diagnostics) {
	return types.ObjectValueFrom(
		ctx,
		m.ObjectAttributeTypes(ctx),
		data,
	)
}

func (m ListNestedAttributeTwoListNestedAttributeOneModel) ObjectType(ctx context.Context) types.ObjectType {
	return types.ObjectType{AttrTypes: m.ObjectAttributeTypes(ctx)}
}

func (m ListNestedAttributeTwoListNestedAttributeOneModel) ObjectAttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"bool_attribute": types.BoolType,
	}
}

func (m ListNestedAttributeTwoListNestedAttributeOneModel) ObjectNull(ctx context.Context) types.Object {
	return types.ObjectNull(
		m.ObjectAttributeTypes(ctx),
	)
}

func (m ListNestedAttributeTwoListNestedAttributeOneModel) ObjectValueFrom(ctx context.Context, data any) (types.Object, diag.Diagnostics) {
	return types.ObjectValueFrom(
		ctx,
		m.ObjectAttributeTypes(ctx),
		data,
	)
}
func (m MapNestedAttributeAssocExtTypeModel) ObjectType(ctx context.Context) types.ObjectType {
	return types.ObjectType{AttrTypes: m.ObjectAttributeTypes(ctx)}
}

func (m MapNestedAttributeAssocExtTypeModel) ObjectAttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"bool_attribute":    types.BoolType,
		"float64_attribute": types.Float64Type,
		"int64_attribute":   types.Int64Type,
		"number_attribute":  types.NumberType,
		"string_attribute":  types.StringType,
	}
}

func (m MapNestedAttributeAssocExtTypeModel) ObjectNull(ctx context.Context) types.Object {
	return types.ObjectNull(
		m.ObjectAttributeTypes(ctx),
	)
}

func (m MapNestedAttributeAssocExtTypeModel) ObjectValueFrom(ctx context.Context, data any) (types.Object, diag.Diagnostics) {
	return types.ObjectValueFrom(
		ctx,
		m.ObjectAttributeTypes(ctx),
		data,
	)
}
func (m SetNestedAttributeAssocExtTypeModel) ObjectType(ctx context.Context) types.ObjectType {
	return types.ObjectType{AttrTypes: m.ObjectAttributeTypes(ctx)}
}

func (m SetNestedAttributeAssocExtTypeModel) ObjectAttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"bool_attribute":    types.BoolType,
		"float64_attribute": types.Float64Type,
		"int64_attribute":   types.Int64Type,
		"number_attribute":  types.NumberType,
		"string_attribute":  types.StringType,
	}
}

func (m SetNestedAttributeAssocExtTypeModel) ObjectNull(ctx context.Context) types.Object {
	return types.ObjectNull(
		m.ObjectAttributeTypes(ctx),
	)
}

func (m SetNestedAttributeAssocExtTypeModel) ObjectValueFrom(ctx context.Context, data any) (types.Object, diag.Diagnostics) {
	return types.ObjectValueFrom(
		ctx,
		m.ObjectAttributeTypes(ctx),
		data,
	)
}
func (m SingleNestedAttributeAssocExtTypeModel) ObjectType(ctx context.Context) types.ObjectType {
	return types.ObjectType{AttrTypes: m.ObjectAttributeTypes(ctx)}
}

func (m SingleNestedAttributeAssocExtTypeModel) ObjectAttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"bool_attribute":    types.BoolType,
		"float64_attribute": types.Float64Type,
		"int64_attribute":   types.Int64Type,
		"number_attribute":  types.NumberType,
		"string_attribute":  types.StringType,
	}
}

func (m SingleNestedAttributeAssocExtTypeModel) ObjectNull(ctx context.Context) types.Object {
	return types.ObjectNull(
		m.ObjectAttributeTypes(ctx),
	)
}

func (m SingleNestedAttributeAssocExtTypeModel) ObjectValueFrom(ctx context.Context, data any) (types.Object, diag.Diagnostics) {
	return types.ObjectValueFrom(
		ctx,
		m.ObjectAttributeTypes(ctx),
		data,
	)
}
func (m SingleNestedAttributeOneModel) ObjectType(ctx context.Context) types.ObjectType {
	return types.ObjectType{AttrTypes: m.ObjectAttributeTypes(ctx)}
}

func (m SingleNestedAttributeOneModel) ObjectAttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"bool_attribute": types.BoolType,
	}
}

func (m SingleNestedAttributeOneModel) ObjectNull(ctx context.Context) types.Object {
	return types.ObjectNull(
		m.ObjectAttributeTypes(ctx),
	)
}

func (m SingleNestedAttributeOneModel) ObjectValueFrom(ctx context.Context, data any) (types.Object, diag.Diagnostics) {
	return types.ObjectValueFrom(
		ctx,
		m.ObjectAttributeTypes(ctx),
		data,
	)
}
func (m SingleNestedAttributeThreeModel) ObjectType(ctx context.Context) types.ObjectType {
	return types.ObjectType{AttrTypes: m.ObjectAttributeTypes(ctx)}
}

func (m SingleNestedAttributeThreeModel) ObjectAttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"single_nested_attribute_three_single_nested_attribute_one": types.ObjectType{
			AttrTypes: SingleNestedAttributeThreeSingleNestedAttributeOneModel{}.ObjectAttributeTypes(ctx),
		},
	}
}

func (m SingleNestedAttributeThreeModel) ObjectNull(ctx context.Context) types.Object {
	return types.ObjectNull(
		m.ObjectAttributeTypes(ctx),
	)
}

func (m SingleNestedAttributeThreeModel) ObjectValueFrom(ctx context.Context, data any) (types.Object, diag.Diagnostics) {
	return types.ObjectValueFrom(
		ctx,
		m.ObjectAttributeTypes(ctx),
		data,
	)
}

func (m SingleNestedAttributeThreeSingleNestedAttributeOneModel) ObjectType(ctx context.Context) types.ObjectType {
	return types.ObjectType{AttrTypes: m.ObjectAttributeTypes(ctx)}
}

func (m SingleNestedAttributeThreeSingleNestedAttributeOneModel) ObjectAttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"list_attribute": types.ListType{
			ElemType: types.StringType,
		},
	}
}

func (m SingleNestedAttributeThreeSingleNestedAttributeOneModel) ObjectNull(ctx context.Context) types.Object {
	return types.ObjectNull(
		m.ObjectAttributeTypes(ctx),
	)
}

func (m SingleNestedAttributeThreeSingleNestedAttributeOneModel) ObjectValueFrom(ctx context.Context, data any) (types.Object, diag.Diagnostics) {
	return types.ObjectValueFrom(
		ctx,
		m.ObjectAttributeTypes(ctx),
		data,
	)
}
func (m SingleNestedAttributeTwoModel) ObjectType(ctx context.Context) types.ObjectType {
	return types.ObjectType{AttrTypes: m.ObjectAttributeTypes(ctx)}
}

func (m SingleNestedAttributeTwoModel) ObjectAttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"single_nested_attribute_two_single_nested_attribute_one": types.ObjectType{
			AttrTypes: SingleNestedAttributeTwoSingleNestedAttributeOneModel{}.ObjectAttributeTypes(ctx),
		},
	}
}

func (m SingleNestedAttributeTwoModel) ObjectNull(ctx context.Context) types.Object {
	return types.ObjectNull(
		m.ObjectAttributeTypes(ctx),
	)
}

func (m SingleNestedAttributeTwoModel) ObjectValueFrom(ctx context.Context, data any) (types.Object, diag.Diagnostics) {
	return types.ObjectValueFrom(
		ctx,
		m.ObjectAttributeTypes(ctx),
		data,
	)
}

func (m SingleNestedAttributeTwoSingleNestedAttributeOneModel) ObjectType(ctx context.Context) types.ObjectType {
	return types.ObjectType{AttrTypes: m.ObjectAttributeTypes(ctx)}
}

func (m SingleNestedAttributeTwoSingleNestedAttributeOneModel) ObjectAttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"bool_attribute": types.BoolType,
	}
}

func (m SingleNestedAttributeTwoSingleNestedAttributeOneModel) ObjectNull(ctx context.Context) types.Object {
	return types.ObjectNull(
		m.ObjectAttributeTypes(ctx),
	)
}

func (m SingleNestedAttributeTwoSingleNestedAttributeOneModel) ObjectValueFrom(ctx context.Context, data any) (types.Object, diag.Diagnostics) {
	return types.ObjectValueFrom(
		ctx,
		m.ObjectAttributeTypes(ctx),
		data,
	)
}
func (m ListNestedBlockAssocExtTypeModel) ObjectType(ctx context.Context) types.ObjectType {
	return types.ObjectType{AttrTypes: m.ObjectAttributeTypes(ctx)}
}

func (m ListNestedBlockAssocExtTypeModel) ObjectAttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"bool_attribute":    types.BoolType,
		"float64_attribute": types.Float64Type,
		"int64_attribute":   types.Int64Type,
		"number_attribute":  types.NumberType,
		"string_attribute":  types.StringType,
	}
}

func (m ListNestedBlockAssocExtTypeModel) ObjectNull(ctx context.Context) types.Object {
	return types.ObjectNull(
		m.ObjectAttributeTypes(ctx),
	)
}

func (m ListNestedBlockAssocExtTypeModel) ObjectValueFrom(ctx context.Context, data any) (types.Object, diag.Diagnostics) {
	return types.ObjectValueFrom(
		ctx,
		m.ObjectAttributeTypes(ctx),
		data,
	)
}
func (m ListNestedBlockOneModel) ObjectType(ctx context.Context) types.ObjectType {
	return types.ObjectType{AttrTypes: m.ObjectAttributeTypes(ctx)}
}

func (m ListNestedBlockOneModel) ObjectAttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"bool_attribute": types.BoolType,
	}
}

func (m ListNestedBlockOneModel) ObjectNull(ctx context.Context) types.Object {
	return types.ObjectNull(
		m.ObjectAttributeTypes(ctx),
	)
}

func (m ListNestedBlockOneModel) ObjectValueFrom(ctx context.Context, data any) (types.Object, diag.Diagnostics) {
	return types.ObjectValueFrom(
		ctx,
		m.ObjectAttributeTypes(ctx),
		data,
	)
}
func (m ListNestedBlockThreeModel) ObjectType(ctx context.Context) types.ObjectType {
	return types.ObjectType{AttrTypes: m.ObjectAttributeTypes(ctx)}
}

func (m ListNestedBlockThreeModel) ObjectAttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"list_nested_block_three_list_nested_block_one": types.ListType{
			ElemType: ListNestedBlockThreeListNestedBlockOneModel{}.ObjectType(ctx),
		},
		"object_attribute": types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"string_attribute_type": types.StringType,
			},
		},
	}
}

func (m ListNestedBlockThreeModel) ObjectNull(ctx context.Context) types.Object {
	return types.ObjectNull(
		m.ObjectAttributeTypes(ctx),
	)
}

func (m ListNestedBlockThreeModel) ObjectValueFrom(ctx context.Context, data any) (types.Object, diag.Diagnostics) {
	return types.ObjectValueFrom(
		ctx,
		m.ObjectAttributeTypes(ctx),
		data,
	)
}

func (m ListNestedBlockThreeListNestedBlockOneModel) ObjectType(ctx context.Context) types.ObjectType {
	return types.ObjectType{AttrTypes: m.ObjectAttributeTypes(ctx)}
}

func (m ListNestedBlockThreeListNestedBlockOneModel) ObjectAttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"list_attribute": types.ListType{
			ElemType: types.StringType,
		},
	}
}

func (m ListNestedBlockThreeListNestedBlockOneModel) ObjectNull(ctx context.Context) types.Object {
	return types.ObjectNull(
		m.ObjectAttributeTypes(ctx),
	)
}

func (m ListNestedBlockThreeListNestedBlockOneModel) ObjectValueFrom(ctx context.Context, data any) (types.Object, diag.Diagnostics) {
	return types.ObjectValueFrom(
		ctx,
		m.ObjectAttributeTypes(ctx),
		data,
	)
}
func (m ListNestedBlockTwoModel) ObjectType(ctx context.Context) types.ObjectType {
	return types.ObjectType{AttrTypes: m.ObjectAttributeTypes(ctx)}
}

func (m ListNestedBlockTwoModel) ObjectAttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"list_nested_block_two_list_nested_block_one": types.ListType{
			ElemType: ListNestedBlockTwoListNestedBlockOneModel{}.ObjectType(ctx),
		},
	}
}

func (m ListNestedBlockTwoModel) ObjectNull(ctx context.Context) types.Object {
	return types.ObjectNull(
		m.ObjectAttributeTypes(ctx),
	)
}

func (m ListNestedBlockTwoModel) ObjectValueFrom(ctx context.Context, data any) (types.Object, diag.Diagnostics) {
	return types.ObjectValueFrom(
		ctx,
		m.ObjectAttributeTypes(ctx),
		data,
	)
}

func (m ListNestedBlockTwoListNestedBlockOneModel) ObjectType(ctx context.Context) types.ObjectType {
	return types.ObjectType{AttrTypes: m.ObjectAttributeTypes(ctx)}
}

func (m ListNestedBlockTwoListNestedBlockOneModel) ObjectAttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"bool_attribute": types.BoolType,
	}
}

func (m ListNestedBlockTwoListNestedBlockOneModel) ObjectNull(ctx context.Context) types.Object {
	return types.ObjectNull(
		m.ObjectAttributeTypes(ctx),
	)
}

func (m ListNestedBlockTwoListNestedBlockOneModel) ObjectValueFrom(ctx context.Context, data any) (types.Object, diag.Diagnostics) {
	return types.ObjectValueFrom(
		ctx,
		m.ObjectAttributeTypes(ctx),
		data,
	)
}
func (m SetNestedBlockAssocExtTypeModel) ObjectType(ctx context.Context) types.ObjectType {
	return types.ObjectType{AttrTypes: m.ObjectAttributeTypes(ctx)}
}

func (m SetNestedBlockAssocExtTypeModel) ObjectAttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"bool_attribute":    types.BoolType,
		"float64_attribute": types.Float64Type,
		"int64_attribute":   types.Int64Type,
		"number_attribute":  types.NumberType,
		"string_attribute":  types.StringType,
	}
}

func (m SetNestedBlockAssocExtTypeModel) ObjectNull(ctx context.Context) types.Object {
	return types.ObjectNull(
		m.ObjectAttributeTypes(ctx),
	)
}

func (m SetNestedBlockAssocExtTypeModel) ObjectValueFrom(ctx context.Context, data any) (types.Object, diag.Diagnostics) {
	return types.ObjectValueFrom(
		ctx,
		m.ObjectAttributeTypes(ctx),
		data,
	)
}
func (m SingleNestedBlockAssocExtTypeModel) ObjectType(ctx context.Context) types.ObjectType {
	return types.ObjectType{AttrTypes: m.ObjectAttributeTypes(ctx)}
}

func (m SingleNestedBlockAssocExtTypeModel) ObjectAttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"bool_attribute":    types.BoolType,
		"float64_attribute": types.Float64Type,
		"int64_attribute":   types.Int64Type,
		"number_attribute":  types.NumberType,
		"string_attribute":  types.StringType,
	}
}

func (m SingleNestedBlockAssocExtTypeModel) ObjectNull(ctx context.Context) types.Object {
	return types.ObjectNull(
		m.ObjectAttributeTypes(ctx),
	)
}

func (m SingleNestedBlockAssocExtTypeModel) ObjectValueFrom(ctx context.Context, data any) (types.Object, diag.Diagnostics) {
	return types.ObjectValueFrom(
		ctx,
		m.ObjectAttributeTypes(ctx),
		data,
	)
}
func (m SingleNestedBlockOneModel) ObjectType(ctx context.Context) types.ObjectType {
	return types.ObjectType{AttrTypes: m.ObjectAttributeTypes(ctx)}
}

func (m SingleNestedBlockOneModel) ObjectAttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"bool_attribute": types.BoolType,
	}
}

func (m SingleNestedBlockOneModel) ObjectNull(ctx context.Context) types.Object {
	return types.ObjectNull(
		m.ObjectAttributeTypes(ctx),
	)
}

func (m SingleNestedBlockOneModel) ObjectValueFrom(ctx context.Context, data any) (types.Object, diag.Diagnostics) {
	return types.ObjectValueFrom(
		ctx,
		m.ObjectAttributeTypes(ctx),
		data,
	)
}
func (m SingleNestedBlockThreeModel) ObjectType(ctx context.Context) types.ObjectType {
	return types.ObjectType{AttrTypes: m.ObjectAttributeTypes(ctx)}
}

func (m SingleNestedBlockThreeModel) ObjectAttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"object_attribute": types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"string_attribute_type": types.StringType,
			},
		},
		"single_nested_block_three_list_nested_block_one": types.ListType{
			ElemType: SingleNestedBlockThreeListNestedBlockOneModel{}.ObjectType(ctx),
		},
	}
}

func (m SingleNestedBlockThreeModel) ObjectNull(ctx context.Context) types.Object {
	return types.ObjectNull(
		m.ObjectAttributeTypes(ctx),
	)
}

func (m SingleNestedBlockThreeModel) ObjectValueFrom(ctx context.Context, data any) (types.Object, diag.Diagnostics) {
	return types.ObjectValueFrom(
		ctx,
		m.ObjectAttributeTypes(ctx),
		data,
	)
}

func (m SingleNestedBlockThreeListNestedBlockOneModel) ObjectType(ctx context.Context) types.ObjectType {
	return types.ObjectType{AttrTypes: m.ObjectAttributeTypes(ctx)}
}

func (m SingleNestedBlockThreeListNestedBlockOneModel) ObjectAttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"list_attribute": types.ListType{
			ElemType: types.StringType,
		},
	}
}

func (m SingleNestedBlockThreeListNestedBlockOneModel) ObjectNull(ctx context.Context) types.Object {
	return types.ObjectNull(
		m.ObjectAttributeTypes(ctx),
	)
}

func (m SingleNestedBlockThreeListNestedBlockOneModel) ObjectValueFrom(ctx context.Context, data any) (types.Object, diag.Diagnostics) {
	return types.ObjectValueFrom(
		ctx,
		m.ObjectAttributeTypes(ctx),
		data,
	)
}
func (m SingleNestedBlockTwoModel) ObjectType(ctx context.Context) types.ObjectType {
	return types.ObjectType{AttrTypes: m.ObjectAttributeTypes(ctx)}
}

func (m SingleNestedBlockTwoModel) ObjectAttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"single_nested_block_two_single_nested_block_one": types.ObjectType{
			AttrTypes: SingleNestedBlockTwoSingleNestedBlockOneModel{}.ObjectAttributeTypes(ctx),
		},
	}
}

func (m SingleNestedBlockTwoModel) ObjectNull(ctx context.Context) types.Object {
	return types.ObjectNull(
		m.ObjectAttributeTypes(ctx),
	)
}

func (m SingleNestedBlockTwoModel) ObjectValueFrom(ctx context.Context, data any) (types.Object, diag.Diagnostics) {
	return types.ObjectValueFrom(
		ctx,
		m.ObjectAttributeTypes(ctx),
		data,
	)
}

func (m SingleNestedBlockTwoSingleNestedBlockOneModel) ObjectType(ctx context.Context) types.ObjectType {
	return types.ObjectType{AttrTypes: m.ObjectAttributeTypes(ctx)}
}

func (m SingleNestedBlockTwoSingleNestedBlockOneModel) ObjectAttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"bool_attribute": types.BoolType,
	}
}

func (m SingleNestedBlockTwoSingleNestedBlockOneModel) ObjectNull(ctx context.Context) types.Object {
	return types.ObjectNull(
		m.ObjectAttributeTypes(ctx),
	)
}

func (m SingleNestedBlockTwoSingleNestedBlockOneModel) ObjectValueFrom(ctx context.Context, data any) (types.Object, diag.Diagnostics) {
	return types.ObjectValueFrom(
		ctx,
		m.ObjectAttributeTypes(ctx),
		data,
	)
}

func ToListNestedAttributeAssocExtType(ctx context.Context, tfList types.List) ([]*apisdk.Type, diag.Diagnostics) {
	var diags diag.Diagnostics

	if tfList.IsNull() {
		return nil, diags
	}

	if tfList.IsUnknown() {
		diags.Append(diag.NewErrorDiagnostic(
			"List Value Is Unknown",
			`Model field "ListNestedAttributeAssocExtType" is unknown.`,
		))

		return nil, diags
	}

	var listObjects []types.Object

	diags.Append(tfList.ElementsAs(ctx, &listObjects, false)...)

	if diags.HasError() {
		return nil, diags
	}

	apiObjects := make([]*apisdk.Type, 0, len(listObjects))

	for _, listObject := range listObjects {
		if listObject.IsNull() {
			apiObjects = append(apiObjects, nil)

			continue
		}

		if listObject.IsUnknown() {
			diags.Append(diag.NewErrorDiagnostic(
				"Object Value Within List Is Unknown",
				`Model field "ListNestedAttributeAssocExtType" contains an object which is unknown.`,
			))

			return nil, diags
		}

		var tfModel ListNestedAttributeAssocExtTypeModel

		d := listObject.As(ctx, &tfModel, basetypes.ObjectAsOptions{})

		diags.Append(d...)

		if diags.HasError() {
			return nil, diags
		}

		apiObjects = append(apiObjects, &apisdk.Type{
			BoolAttribute:    tfModel.BoolAttribute.ValueBoolPointer(),
			Float64Attribute: tfModel.Float64Attribute.ValueFloat64Pointer(),
			Int64Attribute:   tfModel.Int64Attribute.ValueInt64Pointer(),
			NumberAttribute:  tfModel.NumberAttribute.ValueBigFloat(),
			StringAttribute:  tfModel.StringAttribute.ValueStringPointer(),
		})
	}

	return apiObjects, diags
}

func FromListNestedAttributeAssocExtType(ctx context.Context, apiObjects []*apisdk.Type) (types.List, diag.Diagnostics) {
	var diags diag.Diagnostics
	var tfModel ListNestedAttributeAssocExtTypeModel

	if apiObjects == nil {
		return types.ListNull(
			tfModel.ObjectType(ctx),
		), diags
	}

	var tfModels []*ListNestedAttributeAssocExtTypeModel

	for _, apiObject := range apiObjects {
		if apiObject == nil {
			tfModels = append(tfModels, nil)

			continue
		}

		tfModels = append(tfModels, &ListNestedAttributeAssocExtTypeModel{
			BoolAttribute:    types.BoolPointerValue(apiObject.BoolAttribute),
			Float64Attribute: types.Float64PointerValue(apiObject.Float64Attribute),
			Int64Attribute:   types.Int64PointerValue(apiObject.Int64Attribute),
			NumberAttribute:  types.NumberValue(apiObject.NumberAttribute),
			StringAttribute:  types.StringPointerValue(apiObject.StringAttribute),
		})
	}

	return types.ListValueFrom(ctx, tfModel.ObjectType(ctx), tfModels)
}

func ToMapNestedAttributeAssocExtType(ctx context.Context, tfMap types.Map) (map[string]*apisdk.Type, diag.Diagnostics) {
	var diags diag.Diagnostics

	if tfMap.IsNull() {
		return nil, diags
	}

	if tfMap.IsUnknown() {
		diags.Append(diag.NewErrorDiagnostic(
			"Map Value Is Unknown",
			`Model field "MapNestedAttributeAssocExtType" is unknown.`,
		))

		return nil, diags
	}

	mapObjects := make(map[string]types.Object)

	diags.Append(tfMap.ElementsAs(ctx, &mapObjects, false)...)

	if diags.HasError() {
		return nil, diags
	}

	apiObjects := make(map[string]*apisdk.Type, len(mapObjects))

	for k, mapObject := range mapObjects {
		if mapObject.IsNull() {
			apiObjects[k] = nil

			continue
		}

		if mapObject.IsUnknown() {
			diags.Append(diag.NewErrorDiagnostic(
				"Object Value Within Map Is Unknown",
				`Model field "MapNestedAttributeAssocExtType" contains an object which is unknown.`,
			))

			return nil, diags
		}

		var tfModel MapNestedAttributeAssocExtTypeModel

		d := mapObject.As(ctx, &tfModel, basetypes.ObjectAsOptions{})

		diags.Append(d...)

		if diags.HasError() {
			return nil, diags
		}

		apiObjects[k] = &apisdk.Type{
			BoolAttribute:    tfModel.BoolAttribute.ValueBoolPointer(),
			Float64Attribute: tfModel.Float64Attribute.ValueFloat64Pointer(),
			Int64Attribute:   tfModel.Int64Attribute.ValueInt64Pointer(),
			NumberAttribute:  tfModel.NumberAttribute.ValueBigFloat(),
			StringAttribute:  tfModel.StringAttribute.ValueStringPointer(),
		}
	}

	return apiObjects, diags
}

func FromMapNestedAttributeAssocExtType(ctx context.Context, apiObjects map[string]*apisdk.Type) (types.Map, diag.Diagnostics) {
	var diags diag.Diagnostics
	var tfModel MapNestedAttributeAssocExtTypeModel

	if apiObjects == nil {
		return types.MapNull(
			tfModel.ObjectType(ctx),
		), diags
	}

	tfModels := make(map[string]*MapNestedAttributeAssocExtTypeModel)

	for k, apiObject := range apiObjects {
		if apiObject == nil {
			tfModels[k] = nil

			continue
		}

		tfModels[k] = &MapNestedAttributeAssocExtTypeModel{
			BoolAttribute:    types.BoolPointerValue(apiObject.BoolAttribute),
			Float64Attribute: types.Float64PointerValue(apiObject.Float64Attribute),
			Int64Attribute:   types.Int64PointerValue(apiObject.Int64Attribute),
			NumberAttribute:  types.NumberValue(apiObject.NumberAttribute),
			StringAttribute:  types.StringPointerValue(apiObject.StringAttribute),
		}
	}

	return types.MapValueFrom(ctx, tfModel.ObjectType(ctx), tfModels)
}

func ToSetNestedAttributeAssocExtType(ctx context.Context, tfSet types.Set) ([]*apisdk.Type, diag.Diagnostics) {
	var diags diag.Diagnostics

	if tfSet.IsNull() {
		return nil, diags
	}

	if tfSet.IsUnknown() {
		diags.Append(diag.NewErrorDiagnostic(
			"Set Value Is Unknown",
			`Model field "SetNestedAttributeAssocExtType" is unknown.`,
		))

		return nil, diags
	}

	var setObjects []types.Object

	diags.Append(tfSet.ElementsAs(ctx, &setObjects, false)...)

	if diags.HasError() {
		return nil, diags
	}

	apiObjects := make([]*apisdk.Type, 0, len(setObjects))

	for _, setObject := range setObjects {
		if setObject.IsNull() {
			apiObjects = append(apiObjects, nil)

			continue
		}

		if setObject.IsUnknown() {
			diags.Append(diag.NewErrorDiagnostic(
				"Object Value Within Set Is Unknown",
				`Model field "SetNestedAttributeAssocExtType" contains an object which is unknown.`,
			))

			return nil, diags
		}

		var tfModel SetNestedAttributeAssocExtTypeModel

		d := setObject.As(ctx, &tfModel, basetypes.ObjectAsOptions{})

		diags.Append(d...)

		if diags.HasError() {
			return nil, diags
		}

		apiObjects = append(apiObjects, &apisdk.Type{
			BoolAttribute:    tfModel.BoolAttribute.ValueBoolPointer(),
			Float64Attribute: tfModel.Float64Attribute.ValueFloat64Pointer(),
			Int64Attribute:   tfModel.Int64Attribute.ValueInt64Pointer(),
			NumberAttribute:  tfModel.NumberAttribute.ValueBigFloat(),
			StringAttribute:  tfModel.StringAttribute.ValueStringPointer(),
		})
	}

	return apiObjects, diags
}

func FromSetNestedAttributeAssocExtType(ctx context.Context, apiObjects []*apisdk.Type) (types.Set, diag.Diagnostics) {
	var diags diag.Diagnostics
	var tfModel SetNestedAttributeAssocExtTypeModel

	if apiObjects == nil {
		return types.SetNull(
			tfModel.ObjectType(ctx),
		), diags
	}

	var tfModels []*SetNestedAttributeAssocExtTypeModel

	for _, apiObject := range apiObjects {
		if apiObject == nil {
			tfModels = append(tfModels, nil)

			continue
		}

		tfModels = append(tfModels, &SetNestedAttributeAssocExtTypeModel{
			BoolAttribute:    types.BoolPointerValue(apiObject.BoolAttribute),
			Float64Attribute: types.Float64PointerValue(apiObject.Float64Attribute),
			Int64Attribute:   types.Int64PointerValue(apiObject.Int64Attribute),
			NumberAttribute:  types.NumberValue(apiObject.NumberAttribute),
			StringAttribute:  types.StringPointerValue(apiObject.StringAttribute),
		})
	}

	return types.SetValueFrom(ctx, tfModel.ObjectType(ctx), tfModels)
}

func ToSingleNestedAttributeAssocExtType(ctx context.Context, tfObject types.Object) (*apisdk.Type, diag.Diagnostics) {
	var diags diag.Diagnostics

	if tfObject.IsNull() {
		return nil, diags
	}

	if tfObject.IsUnknown() {
		diags.Append(diag.NewErrorDiagnostic(
			"Object Value Is Unknown",
			`Model field "SingleNestedAttributeAssocExtType" is unknown.`,
		))

		return nil, diags
	}

	var tfModel SingleNestedAttributeAssocExtTypeModel

	diags.Append(tfObject.As(ctx, &tfModel, basetypes.ObjectAsOptions{})...)

	if diags.HasError() {
		return nil, diags
	}

	apiObject := &apisdk.Type{
		BoolAttribute:    tfModel.BoolAttribute.ValueBoolPointer(),
		Float64Attribute: tfModel.Float64Attribute.ValueFloat64Pointer(),
		Int64Attribute:   tfModel.Int64Attribute.ValueInt64Pointer(),
		NumberAttribute:  tfModel.NumberAttribute.ValueBigFloat(),
		StringAttribute:  tfModel.StringAttribute.ValueStringPointer(),
	}

	return apiObject, diags
}

func FromSingleNestedAttributeAssocExtType(ctx context.Context, apiObject *apisdk.Type) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var tfModel SingleNestedAttributeAssocExtTypeModel

	if apiObject == nil {
		return tfModel.ObjectNull(ctx), diags
	}

	tfModel.BoolAttribute = types.BoolPointerValue(apiObject.BoolAttribute)
	tfModel.Float64Attribute = types.Float64PointerValue(apiObject.Float64Attribute)
	tfModel.Int64Attribute = types.Int64PointerValue(apiObject.Int64Attribute)
	tfModel.NumberAttribute = types.NumberValue(apiObject.NumberAttribute)
	tfModel.StringAttribute = types.StringPointerValue(apiObject.StringAttribute)

	return tfModel.ObjectValueFrom(ctx, tfModel)
}

func ToListNestedBlockAssocExtType(ctx context.Context, tfList types.List) ([]*apisdk.Type, diag.Diagnostics) {
	var diags diag.Diagnostics

	if tfList.IsNull() {
		return nil, diags
	}

	if tfList.IsUnknown() {
		diags.Append(diag.NewErrorDiagnostic(
			"List Value Is Unknown",
			`Model field "ListNestedBlockAssocExtType" is unknown.`,
		))

		return nil, diags
	}

	var listObjects []types.Object

	diags.Append(tfList.ElementsAs(ctx, &listObjects, false)...)

	if diags.HasError() {
		return nil, diags
	}

	apiObjects := make([]*apisdk.Type, 0, len(listObjects))

	for _, listObject := range listObjects {
		if listObject.IsNull() {
			apiObjects = append(apiObjects, nil)

			continue
		}

		if listObject.IsUnknown() {
			diags.Append(diag.NewErrorDiagnostic(
				"Object Value Within List Is Unknown",
				`Model field "ListNestedBlockAssocExtType" contains an object which is unknown.`,
			))

			return nil, diags
		}

		var tfModel ListNestedBlockAssocExtTypeModel

		d := listObject.As(ctx, &tfModel, basetypes.ObjectAsOptions{})

		diags.Append(d...)

		if diags.HasError() {
			return nil, diags
		}

		apiObjects = append(apiObjects, &apisdk.Type{
			BoolAttribute:    tfModel.BoolAttribute.ValueBoolPointer(),
			Float64Attribute: tfModel.Float64Attribute.ValueFloat64Pointer(),
			Int64Attribute:   tfModel.Int64Attribute.ValueInt64Pointer(),
			NumberAttribute:  tfModel.NumberAttribute.ValueBigFloat(),
			StringAttribute:  tfModel.StringAttribute.ValueStringPointer(),
		})
	}

	return apiObjects, diags
}

func FromListNestedBlockAssocExtType(ctx context.Context, apiObjects []*apisdk.Type) (types.List, diag.Diagnostics) {
	var diags diag.Diagnostics
	var tfModel ListNestedBlockAssocExtTypeModel

	if apiObjects == nil {
		return types.ListNull(
			tfModel.ObjectType(ctx),
		), diags
	}

	var tfModels []*ListNestedBlockAssocExtTypeModel

	for _, apiObject := range apiObjects {
		if apiObject == nil {
			tfModels = append(tfModels, nil)

			continue
		}

		tfModels = append(tfModels, &ListNestedBlockAssocExtTypeModel{
			BoolAttribute:    types.BoolPointerValue(apiObject.BoolAttribute),
			Float64Attribute: types.Float64PointerValue(apiObject.Float64Attribute),
			Int64Attribute:   types.Int64PointerValue(apiObject.Int64Attribute),
			NumberAttribute:  types.NumberValue(apiObject.NumberAttribute),
			StringAttribute:  types.StringPointerValue(apiObject.StringAttribute),
		})
	}

	return types.ListValueFrom(ctx, tfModel.ObjectType(ctx), tfModels)
}

func ToSetNestedBlockAssocExtType(ctx context.Context, tfSet types.Set) ([]*apisdk.Type, diag.Diagnostics) {
	var diags diag.Diagnostics

	if tfSet.IsNull() {
		return nil, diags
	}

	if tfSet.IsUnknown() {
		diags.Append(diag.NewErrorDiagnostic(
			"Set Value Is Unknown",
			`Model field "SetNestedBlockAssocExtType" is unknown.`,
		))

		return nil, diags
	}

	var setObjects []types.Object

	diags.Append(tfSet.ElementsAs(ctx, &setObjects, false)...)

	if diags.HasError() {
		return nil, diags
	}

	apiObjects := make([]*apisdk.Type, 0, len(setObjects))

	for _, setObject := range setObjects {
		if setObject.IsNull() {
			apiObjects = append(apiObjects, nil)

			continue
		}

		if setObject.IsUnknown() {
			diags.Append(diag.NewErrorDiagnostic(
				"Object Value Within Set Is Unknown",
				`Model field "SetNestedBlockAssocExtType" contains an object which is unknown.`,
			))

			return nil, diags
		}

		var tfModel SetNestedBlockAssocExtTypeModel

		d := setObject.As(ctx, &tfModel, basetypes.ObjectAsOptions{})

		diags.Append(d...)

		if diags.HasError() {
			return nil, diags
		}

		apiObjects = append(apiObjects, &apisdk.Type{
			BoolAttribute:    tfModel.BoolAttribute.ValueBoolPointer(),
			Float64Attribute: tfModel.Float64Attribute.ValueFloat64Pointer(),
			Int64Attribute:   tfModel.Int64Attribute.ValueInt64Pointer(),
			NumberAttribute:  tfModel.NumberAttribute.ValueBigFloat(),
			StringAttribute:  tfModel.StringAttribute.ValueStringPointer(),
		})
	}

	return apiObjects, diags
}

func FromSetNestedBlockAssocExtType(ctx context.Context, apiObjects []*apisdk.Type) (types.Set, diag.Diagnostics) {
	var diags diag.Diagnostics
	var tfModel SetNestedBlockAssocExtTypeModel

	if apiObjects == nil {
		return types.SetNull(
			tfModel.ObjectType(ctx),
		), diags
	}

	var tfModels []*SetNestedBlockAssocExtTypeModel

	for _, apiObject := range apiObjects {
		if apiObject == nil {
			tfModels = append(tfModels, nil)

			continue
		}

		tfModels = append(tfModels, &SetNestedBlockAssocExtTypeModel{
			BoolAttribute:    types.BoolPointerValue(apiObject.BoolAttribute),
			Float64Attribute: types.Float64PointerValue(apiObject.Float64Attribute),
			Int64Attribute:   types.Int64PointerValue(apiObject.Int64Attribute),
			NumberAttribute:  types.NumberValue(apiObject.NumberAttribute),
			StringAttribute:  types.StringPointerValue(apiObject.StringAttribute),
		})
	}

	return types.SetValueFrom(ctx, tfModel.ObjectType(ctx), tfModels)
}

func ToSingleNestedBlockAssocExtType(ctx context.Context, tfObject types.Object) (*apisdk.Type, diag.Diagnostics) {
	var diags diag.Diagnostics

	if tfObject.IsNull() {
		return nil, diags
	}

	if tfObject.IsUnknown() {
		diags.Append(diag.NewErrorDiagnostic(
			"Object Value Is Unknown",
			`Model field "SingleNestedBlockAssocExtType" is unknown.`,
		))

		return nil, diags
	}

	var tfModel SingleNestedBlockAssocExtTypeModel

	diags.Append(tfObject.As(ctx, &tfModel, basetypes.ObjectAsOptions{})...)

	if diags.HasError() {
		return nil, diags
	}

	apiObject := &apisdk.Type{
		BoolAttribute:    tfModel.BoolAttribute.ValueBoolPointer(),
		Float64Attribute: tfModel.Float64Attribute.ValueFloat64Pointer(),
		Int64Attribute:   tfModel.Int64Attribute.ValueInt64Pointer(),
		NumberAttribute:  tfModel.NumberAttribute.ValueBigFloat(),
		StringAttribute:  tfModel.StringAttribute.ValueStringPointer(),
	}

	return apiObject, diags
}

func FromSingleNestedBlockAssocExtType(ctx context.Context, apiObject *apisdk.Type) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var tfModel SingleNestedBlockAssocExtTypeModel

	if apiObject == nil {
		return tfModel.ObjectNull(ctx), diags
	}

	tfModel.BoolAttribute = types.BoolPointerValue(apiObject.BoolAttribute)
	tfModel.Float64Attribute = types.Float64PointerValue(apiObject.Float64Attribute)
	tfModel.Int64Attribute = types.Int64PointerValue(apiObject.Int64Attribute)
	tfModel.NumberAttribute = types.NumberValue(apiObject.NumberAttribute)
	tfModel.StringAttribute = types.StringPointerValue(apiObject.StringAttribute)

	return tfModel.ObjectValueFrom(ctx, tfModel)
}
