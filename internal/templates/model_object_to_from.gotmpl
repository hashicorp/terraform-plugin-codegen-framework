func To{{.Name}}(ctx context.Context, tfObject types.Object) ({{.Type}}, diag.Diagnostics) {
var diags diag.Diagnostics

if tfObject.IsNull() || tfObject.IsUnknown() {
return nil, diags
}

var tfModel {{.Name}}Model

diags.Append(tfObject.As(ctx, &tfModel, basetypes.ObjectAsOptions{})...)

if diags.HasError() {
return nil, diags
}

{{range $field := .Fields }}
{{- if $field.HasAssocExtType}}
to{{$field.Name}}, d := To{{$field.Name}}(ctx, tfModel.{{$field.Name}})

diags.Append(d...)

if diags.HasError() {
return nil, diags
}
{{- end}}
{{- end}}

apiObject := &{{.TypeReference}}{
{{- range $field := .Fields }}
{{- if $field.HasAssocExtType}}
{{$field.Name}}: to{{$field.Name}},
{{- else}}
{{$field.Name}}: tfModel.{{$field.Name}}.{{$field.DefaultTo}}(),
{{- end}}
{{- end}}
}

return apiObject, diags
}

func From{{.Name}}(ctx context.Context, apiObject {{.Type}}) (types.Object, diag.Diagnostics) {
var diags diag.Diagnostics
var tfModel {{.Name}}Model

if apiObject == nil {
return tfModel.ObjectNull(ctx), diags
}

{{range $field := .Fields }}
{{- if $field.HasAssocExtType}}
from{{$field.Name}}, d := From{{$field.Name}}(ctx, apiObject.{{$field.Name}})

diags.Append(d...)

if diags.HasError() {
return tfModel.ObjectNull(ctx), diags
}
{{- end}}
{{- end}}

{{range $field := .Fields }}
{{- if $field.HasAssocExtType}}
tfModel.{{$field.Name}} = from{{$field.Name}}
{{- else}}
tfModel.{{$field.Name}} = types.{{$field.DefaultFrom}}(apiObject.{{$field.Name}})
{{- end}}
{{- end}}

return tfModel.ObjectValueFrom(ctx, tfModel)
}