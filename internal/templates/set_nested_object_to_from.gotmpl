
func To{{.Name}}(ctx context.Context, tfSet types.Set) ([]{{.Type}}, diag.Diagnostics) {
var diags diag.Diagnostics

if tfSet.IsNull() {
return nil, diags
}

if tfSet.IsUnknown() {
diags.Append(diag.NewErrorDiagnostic(
"Set Value Is Unknown",
`Model field "{{.Name}}" is unknown.`,
))

return nil, diags
}

var setObjects []types.Object

diags.Append(tfSet.ElementsAs(ctx, &setObjects, false)...)

if diags.HasError() {
return nil, diags
}

apiObjects := make([]{{.Type}}, 0, len(setObjects))

for _, setObject := range setObjects {
if setObject.IsNull() {
apiObjects = append(apiObjects, nil)

continue
}

if setObject.IsUnknown() {
diags.Append(diag.NewErrorDiagnostic(
"Object Value Within Set Is Unknown",
`Model field "{{.Name}}" contains an object which is unknown.`,
))

return nil, diags
}

var tfModel {{.Name}}Model

d := setObject.As(ctx, &tfModel, basetypes.ObjectAsOptions{})

diags.Append(d...)

if diags.HasError() {
return nil, diags
}

apiObjects = append(apiObjects, &{{.TypeReference}}{
{{- range $field := .Fields }}
{{$field.Name}}: tfModel.{{$field.Name}}.{{$field.DefaultTo}}(),
{{- end}}
})
}

return apiObjects, diags
}

func From{{.Name}}(ctx context.Context, apiObjects []{{.Type}}) (types.Set, diag.Diagnostics) {
var diags diag.Diagnostics
var tfModel {{.Name}}Model

if apiObjects == nil {
return types.SetNull(
tfModel.ObjectType(ctx),
), diags
}

var tfModels []*{{.Name}}Model

for _, apiObject := range apiObjects {
if apiObject == nil {
tfModels = append(tfModels, nil)

continue
}

tfModels = append(tfModels, &{{.Name}}Model{
{{- range $field := .Fields }}
{{$field.Name}}: types.{{$field.DefaultFrom}}(apiObject.{{$field.Name}}),
{{- end}}
})
}

return types.SetValueFrom(ctx, tfModel.ObjectType(ctx), tfModels)
}
